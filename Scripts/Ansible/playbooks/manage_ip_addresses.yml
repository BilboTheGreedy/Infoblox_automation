---
# IP Addresses Management Playbook
# This playbook manages Infoblox IP addresses using the NIOS collection

- name: Validate action for IP addresses
  assert:
    that: action in ['search', 'next_available', 'reserve']
    fail_msg: "Invalid action for IP addresses. Must be one of: search, next_available, reserve"

# Search for IP address information
- name: Search for IP address information
  block:
    - name: Validate IP address or network is provided
      assert:
        that: ip_address is defined or network is defined
        fail_msg: "Either ip_address or network parameter is required for search action"
    
    - name: Validate IP address format
      ansible.builtin.assert:
        that: ip_address is regex('^([0-9]{1,3}\.){3}[0-9]{1,3}$')
        fail_msg: "Invalid IP address format: {{ ip_address }}"
      when: ip_address is defined
    
    - name: Validate network format
      ansible.builtin.assert:
        that: network is regex('^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$')
        fail_msg: "Invalid network format: {{ network }}"
      when: network is defined
    
    - name: Get IP address information
      infoblox.nios_modules.nios_ipv4_address:
        provider: "{{ infoblox_provider }}"
        ip_address: "{{ ip_address }}"
        state: present
        get_object: true
      register: ip_info
      failed_when: false
      when: ip_address is defined
    
    - name: Get network IP information
      infoblox.nios_modules.nios_ipv4_network_container:
        provider: "{{ infoblox_provider }}"
        network: "{{ network }}"
        state: present
        get_object: true
      register: network_info
      failed_when: false
      when: network is defined and ip_address is not defined
    
    - name: Display IP address information
      ansible.builtin.debug:
        var: ip_info.result
      when: ip_address is defined and ip_info.result is defined
    
    - name: Display network information
      ansible.builtin.debug:
        var: network_info.result
      when: network is defined and ip_address is not defined and network_info.result is defined
  when: action == 'search'

# Get next available IP from a network
- name: Get next available IP
  block:
    - name: Validate network is provided
      assert:
        that: network is defined
        fail_msg: "Network parameter is required for next_available action"
    
    - name: Validate network format
      ansible.builtin.assert:
        that: network is regex('^([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$')
        fail_msg: "Invalid network format: {{ network }}"
    
    - name: Get next available IP address
      infoblox.nios_modules.nios_next_ip:
        provider: "{{ infoblox_provider }}"
        network: "{{ network }}"
        num: 1
      register: next_ip_result
    
    - name: Display next available IP
      ansible.builtin.debug:
        var: next_ip_result.result
  when: action == 'next_available'

# Reserve an IP address (create fixed address)
- name: Reserve IP address
  block:
    - name: Validate required parameters
      assert:
        that: 
          - ip_address is defined
          - mac_address is defined
        fail_msg: "IP address and MAC address are required for reserve action"
    
    - name: Validate IP address format
      ansible.builtin.assert:
        that: ip_address is regex('^([0-9]{1,3}\.){3}[0-9]{1,3}$')
        fail_msg: "Invalid IP address format: {{ ip_address }}"
    
    - name: Validate MAC address format
      ansible.builtin.assert:
        that: mac_address is regex('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$|^([0-9A-Fa-f]{12})$')
        fail_msg: "Invalid MAC address format: {{ mac_address }}. Must be in format: 00:11:22:33:44:55, 00-11-22-33-44-55, or 001122334455"
    
    - name: Check if IP address is already in use
      infoblox.nios_modules.nios_ipv4_address:
        provider: "{{ infoblox_provider }}"
        ip_address: "{{ ip_address }}"
        state: present
        get_object: true
      register: existing_ip
      failed_when: false
    
    - name: Display warning if IP is already in use
      ansible.builtin.debug:
        msg: "WARNING: IP address {{ ip_address }} is already in use. Proceeding due to force flag."
      when: existing_ip.result is defined and force | default(false) | bool
    
    - name: Fail if IP is already in use and force is not set
      ansible.builtin.fail:
        msg: "IP address {{ ip_address }} is already in use. Use force=true to override."
      when: existing_ip.result is defined and not force | default(false) | bool
    
    - name: Create fixed address
      infoblox.nios_modules.nios_fixed_address:
        provider: "{{ infoblox_provider }}"
        ipaddr: "{{ ip_address }}"
        mac: "{{ mac_address }}"
        name: "{{ hostname | default(omit) }}"
        comment: "{{ comment | default('Reserved via Ansible') }}"
        state: present
      register: reserve_result
      when: not existing_ip.result is defined or force | default(false) | bool
    
    - name: Display reservation result
      ansible.builtin.debug:
        var: reserve_result
      when: not existing_ip.result is defined or force | default(false) | bool
    
    # Create DNS record if requested and hostname is provided
    - name: Create DNS record if requested
      block:
        - name: Check if hostname already exists in DNS
          infoblox.nios_modules.nios_a_record:
            provider: "{{ infoblox_provider }}"
            name: "{{ hostname }}"
            view: "{{ dns_view | default('default') }}"
            state: present
            get_object: true
          register: existing_dns
          failed_when: false
          when: hostname is defined and (create_dns | default(false) | bool)
        
        - name: Display warning if hostname already exists in DNS
          ansible.builtin.debug:
            msg: "WARNING: Hostname {{ hostname }} already exists in DNS. Proceeding due to force flag."
          when: hostname is defined and (create_dns | default(false) | bool) and existing_dns.result is defined and force | default(false) | bool
        
        - name: Fail if hostname already exists in DNS and force is not set
          ansible.builtin.fail:
            msg: "Hostname {{ hostname }} already exists in DNS. Use force=true to override."
          when: hostname is defined and (create_dns | default(false) | bool) and existing_dns.result is defined and not force | default(false) | bool
        
        - name: Create DNS A record
          infoblox.nios_modules.nios_a_record:
            provider: "{{ infoblox_provider }}"
            name: "{{ hostname }}"
            ipv4: "{{ ip_address }}"
            view: "{{ dns_view | default('default') }}"
            comment: "{{ comment | default('Created via Ansible') }}"
            state: present
          register: dns_result
          when: hostname is defined and (create_dns | default(false) | bool) and 
                (not existing_dns.result is defined or force | default(false) | bool)
        
        - name: Display DNS record creation result
          ansible.builtin.debug:
            var: dns_result
          when: hostname is defined and (create_dns | default(false) | bool) and 
                (not existing_dns.result is defined or force | default(false) | bool)
      when: hostname is defined and (create_dns | default(false) | bool)
  when: action == 'reserve'